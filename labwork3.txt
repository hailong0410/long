Ex1.1a:
- Define matrices A and B -> equations A*X = B
A = [2 1 -1; -3 -1 2; -2 1 2];
B = [8; -11; -3];
- Using inv function 
x0 = inv(A)*B % x = A^(-1)*B
- Using mldivide function 
x1 = mldivide(A,B) 
- Using x = A\B in Matlab:
x2 = A\B
- Using function linsolve in Matlab 
x3 = linsolve(A,B)

Exercise 1.1b
- Using Gaussian Elimination with Pivoting (GaussPivot.m): 
A = [2 1 -1; -3 -1 2; -2 1 2];
B = [8; -11; -3];
x = GaussPivot(A,B)

Exercise 1.1c
- To change Gaussian Elimination to without Pivoting (GaussNoPivot.m): 
% partial pivoting
%[big,i]=max(abs(Aug(k:n,k))); ipr=i+k-1;
%if ipr~=k
% Aug([k,ipr],:)=Aug([ipr,k],:);
%end
- Using Gaussian Elimination without Pivoting (GaussNoPivot.m): 
A = [2 1 -1; -3 -1 2; -2 1 2];
B = [8; -11; -3];
x = GaussNoPivot(A,B)

Exercise 2.1a
- Define matrices A and B -> equations A*X = B
A = [2 1 -1; -3 -1 2; -2 1 2];
B = [8; -11; -3];
- Using lu function 
[L, U] = lu(A);
d = L\B;
x = U\d

Exercise 2.1b
- Using LU with Pivoting (LU_Pivot.m): 
[L1, U1, P1] = LU_pivot(A);
B1 = [-11; -3; 8];
d1 = L1\B1;
x1 = U1\d1

Exercise 2.1c
- To change LU to without Pivoting (LU_NoPivot.m): 
% [pivot m] = max(abs(U(j:n, j)));
% m = m+j-1;
% if m ~= j
% U([m,j],:) = U([j,m], :); % interchange rows m and j in U
% P([m,j],:) = P([j,m], :); % interchange rows m and j in P
% if j >= 2 % very_important_point
% L([m,j],1:j-1) = L([j,m], 1:j-1); % interchange rows m and j in columns 1:j-1 of L
% end
% end
- Using LU without Pivoting (LU_NoPivot.m): 
[L2, U2, P2] = LU_nopivot(A);
B2 = [8; -11; -3];
d2 = L2\B2;
x2 = U2\d2

Exercise 2.1d
- Using function mylup (mylup.m): 
[L3, U3, P3] = mylup(A);
B3 = [-11; -3; 8];
d3 = L3\B3;
x3 = U3\d3


VII, common

Exercise 1
- Create column vector x
x = transpose(1:1:20);
- Create vector y having same length and size, with values 1
y = ones(size(x));
- Create vector z is the sum of x and y
z = x + y;
- Calculate the dot production between x and y
t = x.*y;
- Increase the first, the 5th, the 16th and the last elements of z by 3
positions = [1, 5, 16, 20];
t(positions) = t(positions) + 3;
- Multiply those elements with 6
t = t*6; 
Exercise 2
- Create column vector x
A = ones(3,3);
- Create matrix B that is transpose of A
B = Aâ€™;
- Compute sum of A and B
C = A+B;
- Compute A*B
D = A*B;
- Compute B*A
E = B*A;
- Increse all elements of A by 2
A = A + 2;